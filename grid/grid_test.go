package grid

import (
	"testing"
)

func TestIndicesForRow(t *testing.T) {
	cases := map[int][8]int{
		0: {1, 2, 3, 4, 5, 6, 7, 8},
		1: {0, 2, 3, 4, 5, 6, 7, 8},
		2: {0, 1, 3, 4, 5, 6, 7, 8},
		3: {0, 1, 2, 4, 5, 6, 7, 8},
		4: {0, 1, 2, 3, 5, 6, 7, 8},
		5: {0, 1, 2, 3, 4, 6, 7, 8},
		6: {0, 1, 2, 3, 4, 5, 7, 8},
		7: {0, 1, 2, 3, 4, 5, 6, 8},
		8: {0, 1, 2, 3, 4, 5, 6, 7},

		9:  {10, 11, 12, 13, 14, 15, 16, 17},
		10: {9, 11, 12, 13, 14, 15, 16, 17},
		11: {9, 10, 12, 13, 14, 15, 16, 17},
		12: {9, 10, 11, 13, 14, 15, 16, 17},
		13: {9, 10, 11, 12, 14, 15, 16, 17},
		14: {9, 10, 11, 12, 13, 15, 16, 17},
		15: {9, 10, 11, 12, 13, 14, 16, 17},
		16: {9, 10, 11, 12, 13, 14, 15, 17},
		17: {9, 10, 11, 12, 13, 14, 15, 16},

		18: {19, 20, 21, 22, 23, 24, 25, 26},
		19: {18, 20, 21, 22, 23, 24, 25, 26},
		20: {18, 19, 21, 22, 23, 24, 25, 26},
		21: {18, 19, 20, 22, 23, 24, 25, 26},
		22: {18, 19, 20, 21, 23, 24, 25, 26},
		23: {18, 19, 20, 21, 22, 24, 25, 26},
		24: {18, 19, 20, 21, 22, 23, 25, 26},
		25: {18, 19, 20, 21, 22, 23, 24, 26},
		26: {18, 19, 20, 21, 22, 23, 24, 25},

		27: {28, 29, 30, 31, 32, 33, 34, 35},
		28: {27, 29, 30, 31, 32, 33, 34, 35},
		29: {27, 28, 30, 31, 32, 33, 34, 35},
		30: {27, 28, 29, 31, 32, 33, 34, 35},
		31: {27, 28, 29, 30, 32, 33, 34, 35},
		32: {27, 28, 29, 30, 31, 33, 34, 35},
		33: {27, 28, 29, 30, 31, 32, 34, 35},
		34: {27, 28, 29, 30, 31, 32, 33, 35},
		35: {27, 28, 29, 30, 31, 32, 33, 34},

		36: {37, 38, 39, 40, 41, 42, 43, 44},
		37: {36, 38, 39, 40, 41, 42, 43, 44},
		38: {36, 37, 39, 40, 41, 42, 43, 44},
		39: {36, 37, 38, 40, 41, 42, 43, 44},
		40: {36, 37, 38, 39, 41, 42, 43, 44},
		41: {36, 37, 38, 39, 40, 42, 43, 44},
		42: {36, 37, 38, 39, 40, 41, 43, 44},
		43: {36, 37, 38, 39, 40, 41, 42, 44},
		44: {36, 37, 38, 39, 40, 41, 42, 43},

		45: {46, 47, 48, 49, 50, 51, 52, 53},
		46: {45, 47, 48, 49, 50, 51, 52, 53},
		47: {45, 46, 48, 49, 50, 51, 52, 53},
		48: {45, 46, 47, 49, 50, 51, 52, 53},
		49: {45, 46, 47, 48, 50, 51, 52, 53},
		50: {45, 46, 47, 48, 49, 51, 52, 53},
		51: {45, 46, 47, 48, 49, 50, 52, 53},
		52: {45, 46, 47, 48, 49, 50, 51, 53},
		53: {45, 46, 47, 48, 49, 50, 51, 52},

		54: {55, 56, 57, 58, 59, 60, 61, 62},
		55: {54, 56, 57, 58, 59, 60, 61, 62},
		56: {54, 55, 57, 58, 59, 60, 61, 62},
		57: {54, 55, 56, 58, 59, 60, 61, 62},
		58: {54, 55, 56, 57, 59, 60, 61, 62},
		59: {54, 55, 56, 57, 58, 60, 61, 62},
		60: {54, 55, 56, 57, 58, 59, 61, 62},
		61: {54, 55, 56, 57, 58, 59, 60, 62},
		62: {54, 55, 56, 57, 58, 59, 60, 61},

		63: {64, 65, 66, 67, 68, 69, 70, 71},
		64: {63, 65, 66, 67, 68, 69, 70, 71},
		65: {63, 64, 66, 67, 68, 69, 70, 71},
		66: {63, 64, 65, 67, 68, 69, 70, 71},
		67: {63, 64, 65, 66, 68, 69, 70, 71},
		68: {63, 64, 65, 66, 67, 69, 70, 71},
		69: {63, 64, 65, 66, 67, 68, 70, 71},
		70: {63, 64, 65, 66, 67, 68, 69, 71},
		71: {63, 64, 65, 66, 67, 68, 69, 70},

		72: {73, 74, 75, 76, 77, 78, 79, 80},
		73: {72, 74, 75, 76, 77, 78, 79, 80},
		74: {72, 73, 75, 76, 77, 78, 79, 80},
		75: {72, 73, 74, 76, 77, 78, 79, 80},
		76: {72, 73, 74, 75, 77, 78, 79, 80},
		77: {72, 73, 74, 75, 76, 78, 79, 80},
		78: {72, 73, 74, 75, 76, 77, 79, 80},
		79: {72, 73, 74, 75, 76, 77, 78, 80},
		80: {72, 73, 74, 75, 76, 77, 78, 79},
	}

	for index, expected := range cases {
		actual := IndicesForRow(index)
		for i := 0; i < 8; i++ {
			if expected[i] != actual[i] {
				t.Errorf("IndicesForRow(%d) == %v; want %v", index, actual, expected)
			}
		}
	}
}

func TestIndicesForColumn(t *testing.T) {
	cases := map[int][8]int{
		0: {9, 18, 27, 36, 45, 54, 63, 72},
		1: {10, 19, 28, 37, 46, 55, 64, 73},
		2: {11, 20, 29, 38, 47, 56, 65, 74},
		3: {12, 21, 30, 39, 48, 57, 66, 75},
		4: {13, 22, 31, 40, 49, 58, 67, 76},
		5: {14, 23, 32, 41, 50, 59, 68, 77},
		6: {15, 24, 33, 42, 51, 60, 69, 78},
		7: {16, 25, 34, 43, 52, 61, 70, 79},
		8: {17, 26, 35, 44, 53, 62, 71, 80},

		9:  {0, 18, 27, 36, 45, 54, 63, 72},
		10: {1, 19, 28, 37, 46, 55, 64, 73},
		11: {2, 20, 29, 38, 47, 56, 65, 74},
		12: {3, 21, 30, 39, 48, 57, 66, 75},
		13: {4, 22, 31, 40, 49, 58, 67, 76},
		14: {5, 23, 32, 41, 50, 59, 68, 77},
		15: {6, 24, 33, 42, 51, 60, 69, 78},
		16: {7, 25, 34, 43, 52, 61, 70, 79},
		17: {8, 26, 35, 44, 53, 62, 71, 80},

		18: {0, 9, 27, 36, 45, 54, 63, 72},
		19: {1, 10, 28, 37, 46, 55, 64, 73},
		20: {2, 11, 29, 38, 47, 56, 65, 74},
		21: {3, 12, 30, 39, 48, 57, 66, 75},
		22: {4, 13, 31, 40, 49, 58, 67, 76},
		23: {5, 14, 32, 41, 50, 59, 68, 77},
		24: {6, 15, 33, 42, 51, 60, 69, 78},
		25: {7, 16, 34, 43, 52, 61, 70, 79},
		26: {8, 17, 35, 44, 53, 62, 71, 80},

		27: {0, 9, 18, 36, 45, 54, 63, 72},
		28: {1, 10, 19, 37, 46, 55, 64, 73},
		29: {2, 11, 20, 38, 47, 56, 65, 74},
		30: {3, 12, 21, 39, 48, 57, 66, 75},
		31: {4, 13, 22, 40, 49, 58, 67, 76},
		32: {5, 14, 23, 41, 50, 59, 68, 77},
		33: {6, 15, 24, 42, 51, 60, 69, 78},
		34: {7, 16, 25, 43, 52, 61, 70, 79},
		35: {8, 17, 26, 44, 53, 62, 71, 80},

		36: {0, 9, 18, 27, 45, 54, 63, 72},
		37: {1, 10, 19, 28, 46, 55, 64, 73},
		38: {2, 11, 20, 29, 47, 56, 65, 74},
		39: {3, 12, 21, 30, 48, 57, 66, 75},
		40: {4, 13, 22, 31, 49, 58, 67, 76},
		41: {5, 14, 23, 32, 50, 59, 68, 77},
		42: {6, 15, 24, 33, 51, 60, 69, 78},
		43: {7, 16, 25, 34, 52, 61, 70, 79},
		44: {8, 17, 26, 35, 53, 62, 71, 80},

		45: {0, 9, 18, 27, 36, 54, 63, 72},
		46: {1, 10, 19, 28, 37, 55, 64, 73},
		47: {2, 11, 20, 29, 38, 56, 65, 74},
		48: {3, 12, 21, 30, 39, 57, 66, 75},
		49: {4, 13, 22, 31, 40, 58, 67, 76},
		50: {5, 14, 23, 32, 41, 59, 68, 77},
		51: {6, 15, 24, 33, 42, 60, 69, 78},
		52: {7, 16, 25, 34, 43, 61, 70, 79},
		53: {8, 17, 26, 35, 44, 62, 71, 80},

		54: {0, 9, 18, 27, 36, 45, 63, 72},
		55: {1, 10, 19, 28, 37, 46, 64, 73},
		56: {2, 11, 20, 29, 38, 47, 65, 74},
		57: {3, 12, 21, 30, 39, 48, 66, 75},
		58: {4, 13, 22, 31, 40, 49, 67, 76},
		59: {5, 14, 23, 32, 41, 50, 68, 77},
		60: {6, 15, 24, 33, 42, 51, 69, 78},
		61: {7, 16, 25, 34, 43, 52, 70, 79},
		62: {8, 17, 26, 35, 44, 53, 71, 80},

		63: {0, 9, 18, 27, 36, 45, 54, 72},
		64: {1, 10, 19, 28, 37, 46, 55, 73},
		65: {2, 11, 20, 29, 38, 47, 56, 74},
		66: {3, 12, 21, 30, 39, 48, 57, 75},
		67: {4, 13, 22, 31, 40, 49, 58, 76},
		68: {5, 14, 23, 32, 41, 50, 59, 77},
		69: {6, 15, 24, 33, 42, 51, 60, 78},
		70: {7, 16, 25, 34, 43, 52, 61, 79},
		71: {8, 17, 26, 35, 44, 53, 62, 80},

		72: {0, 9, 18, 27, 36, 45, 54, 63},
		73: {1, 10, 19, 28, 37, 46, 55, 64},
		74: {2, 11, 20, 29, 38, 47, 56, 65},
		75: {3, 12, 21, 30, 39, 48, 57, 66},
		76: {4, 13, 22, 31, 40, 49, 58, 67},
		77: {5, 14, 23, 32, 41, 50, 59, 68},
		78: {6, 15, 24, 33, 42, 51, 60, 69},
		79: {7, 16, 25, 34, 43, 52, 61, 70},
		80: {8, 17, 26, 35, 44, 53, 62, 71},
	}

	for index, expected := range cases {
		actual := IndicesForColumn(index)
		for i := 0; i < 8; i++ {
			if expected[i] != actual[i] {
				t.Errorf("IndicesForColumn(%d) == %v; want %v", index, actual, expected)
				break
			}
		}
	}
}

//  0  1  2		 3  4  5		6  7  8
//  9 10 11		12 13 14	 15 16 17
// 18 19 20		21 22 23	 24 25 26

// 27 28 29		30 31 32	 33 34 35
// 36 37 38		39 40 41	 42 43 44
// 45 46 47		48 49 50	 51 52 53

// 54 55 56		57 58 59	 60 61 62
// 63 64 65		66 67 68	 69 70 71
// 72 73 74		75 76 77	 78 79 80

func TestIndicesForSub(t *testing.T) {
	cases := map[int][8]int{
		0: {1, 2, 9, 10, 11, 18, 19, 20},
		1: {0, 2, 9, 10, 11, 18, 19, 20},
		2: {0, 1, 9, 10, 11, 18, 19, 20},
		3: {4, 5, 12, 13, 14, 21, 22, 23},
		4: {3, 5, 12, 13, 14, 21, 22, 23},
		5: {3, 4, 12, 13, 14, 21, 22, 23},
		6: {7, 8, 15, 16, 17, 24, 25, 26},
		7: {6, 8, 15, 16, 17, 24, 25, 26},
		8: {6, 7, 15, 16, 17, 24, 25, 26},

		9:  {0, 1, 2, 10, 11, 18, 19, 20},
		10: {0, 1, 2, 9, 11, 18, 19, 20},
		11: {0, 1, 2, 9, 10, 18, 19, 20},
		12: {3, 4, 5, 13, 14, 21, 22, 23},
		13: {3, 4, 5, 12, 14, 21, 22, 23},
		14: {3, 4, 5, 12, 13, 21, 22, 23},
		15: {6, 7, 8, 16, 17, 24, 25, 26},
		16: {6, 7, 8, 15, 17, 24, 25, 26},
		17: {6, 7, 8, 15, 16, 24, 25, 26},

		18: {0, 1, 2, 9, 10, 11, 19, 20},
		19: {0, 1, 2, 9, 10, 11, 18, 20},
		20: {0, 1, 2, 9, 10, 11, 18, 19},
		21: {3, 4, 5, 12, 13, 14, 22, 23},
		22: {3, 4, 5, 12, 13, 14, 21, 23},
		23: {3, 4, 5, 12, 13, 14, 21, 22},
		24: {6, 7, 8, 15, 16, 17, 25, 26},
		25: {6, 7, 8, 15, 16, 17, 24, 26},
		26: {6, 7, 8, 15, 16, 17, 24, 25},

		27: {28, 29, 36, 37, 38, 45, 46, 47},
		28: {27, 29, 36, 37, 38, 45, 46, 47},
		29: {27, 28, 36, 37, 38, 45, 46, 47},
		30: {31, 32, 39, 40, 41, 48, 49, 50},
		31: {30, 32, 39, 40, 41, 48, 49, 50},
		32: {30, 31, 39, 40, 41, 48, 49, 50},
		33: {34, 35, 42, 43, 44, 51, 52, 53},
		34: {33, 35, 42, 43, 44, 51, 52, 53},
		35: {33, 34, 42, 43, 44, 51, 52, 53},

		36: {27, 28, 29, 37, 38, 45, 46, 47},
		37: {27, 28, 29, 36, 38, 45, 46, 47},
		38: {27, 28, 29, 36, 37, 45, 46, 47},
		39: {30, 31, 32, 40, 41, 48, 49, 50},
		40: {30, 31, 32, 39, 41, 48, 49, 50},
		41: {30, 31, 32, 39, 40, 48, 49, 50},
		42: {33, 34, 35, 43, 44, 51, 52, 53},
		43: {33, 34, 35, 42, 44, 51, 52, 53},
		44: {33, 34, 35, 42, 43, 51, 52, 53},

		45: {27, 28, 29, 36, 37, 38, 46, 47},
		46: {27, 28, 29, 36, 37, 38, 45, 47},
		47: {27, 28, 29, 36, 37, 38, 45, 46},
		48: {30, 31, 32, 39, 40, 41, 49, 50},
		49: {30, 31, 32, 39, 40, 41, 48, 50},
		50: {30, 31, 32, 39, 40, 41, 48, 49},
		51: {33, 34, 35, 42, 43, 44, 52, 53},
		52: {33, 34, 35, 42, 43, 44, 51, 53},
		53: {33, 34, 35, 42, 43, 44, 51, 52},

		54: {55, 56, 63, 64, 65, 72, 73, 74},
		55: {54, 56, 63, 64, 65, 72, 73, 74},
		56: {54, 55, 63, 64, 65, 72, 73, 74},
		57: {58, 59, 66, 67, 68, 75, 76, 77},
		58: {57, 59, 66, 67, 68, 75, 76, 77},
		59: {57, 58, 66, 67, 68, 75, 76, 77},
		60: {61, 62, 69, 70, 71, 78, 79, 80},
		61: {60, 62, 69, 70, 71, 78, 79, 80},
		62: {60, 61, 69, 70, 71, 78, 79, 80},

		63: {54, 55, 56, 64, 65, 72, 73, 74},
		64: {54, 55, 56, 63, 65, 72, 73, 74},
		65: {54, 55, 56, 63, 64, 72, 73, 74},
		66: {57, 58, 59, 67, 68, 75, 76, 77},
		67: {57, 58, 59, 66, 68, 75, 76, 77},
		68: {57, 58, 59, 66, 67, 75, 76, 77},
		69: {60, 61, 62, 70, 71, 78, 79, 80},
		70: {60, 61, 62, 69, 71, 78, 79, 80},
		71: {60, 61, 62, 69, 70, 78, 79, 80},

		72: {54, 55, 56, 63, 64, 65, 73, 74},
		73: {54, 55, 56, 63, 64, 65, 72, 74},
		74: {54, 55, 56, 63, 64, 65, 72, 73},
		75: {57, 58, 59, 66, 67, 68, 76, 77},
		76: {57, 58, 59, 66, 67, 68, 75, 77},
		77: {57, 58, 59, 66, 67, 68, 75, 76},
		78: {60, 61, 62, 69, 70, 71, 79, 80},
		79: {60, 61, 62, 69, 70, 71, 78, 80},
		80: {60, 61, 62, 69, 70, 71, 78, 79},
	}

	for index, expected := range cases {
		actual := IndicesForSub(index)
		for i := 0; i < 8; i++ {
			if expected[i] != actual[i] {
				t.Errorf("IndicesForSub(%d) == %v; want %v", index, actual, expected)
				break
			}
		}
	}
}
